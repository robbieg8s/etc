vim9script

# Do basic keybinds early, so that if something goes wrong, i can edit files competently

map <C-X> <Esc>
# This must be imap not map! because in command mode we want C-X for set cedit below
imap <C-X> <Esc>

nmap <Tab> >>
nmap <S-Tab> <<
nmap <C-G> :cnext<CR>

vmap <Tab> >gv
vmap <S-Tab> <gv

cmap <C-K> <Up>
cmap <C-J> <Down>

# Basic Settings

set autoindent
set autoread
set autowriteall
set cedit=<C-X>
set cmdheight=3
set expandtab
set grepformat=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set ignorecase
set incsearch
set laststatus=2 # => always show status line
set mouse=a
set relativenumber
set shiftwidth=2
set smartcase
set spell
set spelllang=en_au
set tabstop=2
set textwidth=132
set wildmode=list:longest

# Filetypes, Syntax, and Colors

filetype plugin on
syntax on
# This load is sensitive to which side of syntax it is on, for now do it late.
if ("iTerm.app" == $TERM_PROGRAM)
  # Only set background and load colorscheme when we're in iTerm where it looks ok,
  # use defaults elsewhere (notably Apple_Terminal).
  # Without this, Vim appears to correctly guess it is in a more capable terminal, and ignores
  # the ctermfg based setup in my minimal color scheme.
  set notermguicolors
  set background=dark
  colorscheme minimal
endif

# Put various vim temporaries in XDG Cache

def XdgCacheDir(name: string, Consumer: func(string), errormsg: string)
  var dir = ($XDG_CACHE_HOME ?? ($HOME .. "/.cache")) .. "/halfyak.org/etc/vim/" .. name
  if "" == getftype(dir)
    mkdir(dir, "p")
  endif
  if "dir" == getftype(dir)
    Consumer(dir)
  else
    echoerr errormsg
  endif
enddef

XdgCacheDir("backup", (cachedir) => {
  &backupdir = cachedir
}, "Cannot make backup directory - backups are off")
XdgCacheDir("swap", (cachedir) => {
  &directory = cachedir
}, "Cannot make swap directory - swap is off")
XdgCacheDir("undo", (cachedir) => {
  &undodir = cachedir
  &undofile = 1
}, "Cannot make undo directory - undo is off")
XdgCacheDir("netrw", (cachedir) => {
  g:netrw_home = cachedir
}, "Cannot make netrw directory, ~/.vim might get polluted")

# As far as i can tell, functions need to be global to be accessible from the expression register

# Tab -> indent if line upto cursor is all whitespace, autocomplete otherwise
def g:HalfYakTab(): string
  if strpart( getline('.'), 0, col('.') - 1 ) =~ '^\W*$'
    return "\<C-T>"
  else
    return "\<C-N>"
  endif
enddef

# Untab -> dedent if line upto cursor is all whitespace, autocomplete previous match otherwise
def g:HalfYakUntab(): string
  if strpart( getline('.'), 0, col('.') - 1 ) =~ '^\W*$'
    return "\<C-D>"
  else
    return "\<C-P>"
  endif
enddef

# Mappings for Tab, Untab
inoremap <Tab> <C-R>=HalfYakTab()<CR>
inoremap <S-Tab> <C-R>=HalfYakUntab()<CR>

# Use a group so we can delete all and reload
augroup HalfYakAuGroup
  autocmd!
  # Make read only files non modifiable
  autocmd BufReadPost * ++nested {
    if &readonly
      setlocal nomodifiable
    endif
  }
  # Automatically reload vimrc on change
  autocmd BufWritePost vimrc {
    const scriptfile = expand('<sfile>:p')
    # If it's the real vimrc, read it again
    if (expand('%:p') == scriptfile)
      execute 'source' fnameescape(scriptfile)
    endif
  }
  # Copy unnamed register to and from clipboard when focus changes where supported
  # This appears to work for HomeBrew vim on macOS despite being undocumented afaics
  # Also, has('clipboard_working') is false there, even though things work
  autocmd FocusGained * {
    if has('clipboard')
      @" = @*
    endif
  }
  autocmd FocusLost * {
    if has('clipboard')
      @* = @"
    endif
  }
augroup END
