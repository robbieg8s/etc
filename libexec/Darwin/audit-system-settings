#!/bin/zsh -ef

log() {
  local fmt="${1:?}"
  shift
  print -f "$fmt\n" -- "$@"
}

fail() {
  log "$@"
  exit 1
}

ERRORS=0

checkKeyEquivalent() {
  local pbsJson="${1:?}"
  local service="${2:?}"
  local value="${3:?}"
  local name="${4:?}"
  local setting="${5:?}"
  local servicesJq='.pbs.NSServicesStatus[$service].key_equivalent // empty'
  local check
  # We don't use --raw-output here, to make it easier to discern "" from nothing
  check="$(jq --arg service "${service}" "${servicesJq}" < "${pbsJson}")"
  [[ "${check}" == "${value}" ]] || {
      log 'Shortcut for "%s" set to %s != %s' "${name}" "${(q+)check:-default}" "${(q+)value}"
      log ":; open 'x-apple.systempreferences:com.apple.Keyboard-Settings.extension?Shortcuts'"
      log 'In Services tab, under Text in right hand pane, set shortcut for "%s" to %s' "${name}" "${setting}"
      log ' '
      ((ERRORS += 1))
  }
}

() {
  local pbsJson="${1:?}"
  defaults-json pbs > "${pbsJson}"
  # This one i just disabled because it's near the other one and i use Dash for this kind of thing
  checkKeyEquivalent "${pbsJson}" \
    'com.apple.Terminal - Open man Page in Terminal - openManPage' '""' \
    'Open man Page in Terminal' 'none'
  # This one i just disabled because it clashes with the default "find action" in JetBrains IDEs
  checkKeyEquivalent "${pbsJson}" \
    'com.apple.Terminal - Search man Page Index in Terminal - searchManPages' '""' \
    'Search man Page Index in Terminal' 'none'
} =(true)

validateDefaultsWithJq() {
  local domain="${1:?}"
  local jqScript="${2:?}"
  local heading="${3:?}"
  shift 3
  () {
    local defaultsJson="${1:?}"
    shift 1
    defaults-json "${domain}" > "${defaultsJson}"
    local domainErrors
    domainErrors=(${(f)"$(jq --raw-output --from-file "${jqScript}" < "${defaultsJson}")"})
    [[ "${#domainErrors}" -eq 0 ]] || {
        local line
        log '%s' "${heading}"
        for line in "${(@)domainErrors}"
        do
          log '%s' "${line}"
        done
        for epilog in "$@"
        do
          log '%s' "${epilog}"
        done
        log ' '
        ((ERRORS += 1))
    }
  } =(true) "$@"
}

JQ_SAFARI="$(<<'END_JQ'
.["com.apple.Safari"]
| . as { $IncludeDevelopMenu, $NSUserKeyEquivalents }
| [ if $IncludeDevelopMenu
    then empty
    else
      [ "Safari Develop Menu not enabled"
      , "Safari Settings, Advanced Tab, check 'Show features for web developers'"
      ]
    end
  , ( ( $NSUserKeyEquivalents.["Close Tab"] // "default" ) as $closeTab
    # This hack makes Cmd+W still Close Tab even for the last unpinned tab, which avoids closing the window (and
    # the pinned tabs) when i close the last unpinned tab.
    | if $closeTab == "@w"
      then empty
      else
        [ "Shortcut for Safari Close Tab set to \($closeTab) not Cmd+W"
        , ":; open 'x-apple.systempreferences:com.apple.Keyboard-Settings.extension?Shortcuts'"
        , "In App Shortcuts tab, use + to add application Safari.app, Menu title 'Close Tab', Keyboard shortcut Cmd+W"
        ]
      end
    )
  ]
| map("\(.[])\n") | join("")
END_JQ
)"

validateDefaultsWithJq com.apple.Safari <(<<<"${JQ_SAFARI}") "Safari configuration errors:"

JQ_UNIVERSAL_ACCESS="$(<<'END_JQ'
.["com.apple.universalaccess"]
| . as { $cursorOutline, $cursorFill, $mouseDriverCursorSize }
| [ if $mouseDriverCursorSize == 2.5
    then empty
    else "Pointer size is not middle tick"
    end
  , if $cursorOutline == {red: 0.32369780539999998, green: 0.1063579395, blue: 0.574860394, alpha: 1}
    then empty
    else "Pointer outline colour is not pencil Eggplant"
    end
  , if $cursorFill == {red: 1, green: 0.57810515169999999, blue:0, alpha:1}
    then empty
    else "Pointer fill colour is not pencil Tangerine"
    end
  ]
| map("\(.)\n") | join("")
END_JQ
)"

validateDefaultsWithJq com.apple.universalaccess <(<<<"${JQ_UNIVERSAL_ACCESS}") \
  "Pointer settings (mouse cursor) are not correct:" \
  ":; open 'x-apple.systempreferences:com.apple.preference.universalaccess?pointer'"

[[ "${ERRORS}" -eq 0 ]] || fail "Audit failed (${ERRORS} errors) - see above"
