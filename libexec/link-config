#!/bin/zsh
# Symlink configuration into a required location
# This maintains a set of symlinks from a target location to a specific set of source files
# defined by a pattern. The links are relative (resp. absolute) according as the source
# pattern is relative (resp. absolute). A relative source pattern is relative to the target
# directory, not the current working directory, as per typical ln -s behaviour.

# Invoke as
#   link-config target_prefix source_pattern
# target_prefix includes any required per file prefix in the target
#   location, and must end in / if no per prefix is required.
# source_pattern is a glob for zsh ${~source_pattern}

# zsh specific because we want zstat from zsh/stat

set -e

target_prefix="${1:?}"
source_pattern="${2:?}"

zmodload -F zsh/stat b:zstat

need_sudo() {
  local target_dir="${1:?}"
  if [[ ! -w "${target_dir}" ]] && [[ -z "${SUDO}" ]]
  then
    printf "Target directory %s is not writable, will try sudo.\n" "${(q+)target_dir}"
    printf "You might get asked for your password.\n"
    return 0
  else
    return 1
  fi
}

SUDO=
target_dir="${target_prefix%/*}"

if [[ ! -d "${target_dir}" ]]
then
  printf "Target directory %s does not exist\n" "${(q+)target_dir}"
  exit 1
else
  # I normally avoid cd in scripts, but this is the cleanest way to get source relative to target,
  # it matches the setup use case anyway, and so i probably won't find bugs in other usage. I might
  # revisit this if i ever find a need for the more sophisticated behaviour.
  cd "${target_dir}"
  # EXTENDED_GLOB needed for globs in conditionals
  setopt EXTENDED_GLOB
  # I've mixed feelings about the value of this warning, trying it out for singal to noise.
  if [[ -z ${~source_pattern}(#qN) ]]
  then
    printf "No source files found from %s relative to %s\n" "${(q+)source_pattern}" "${(q+)PWD}"
  fi
  for source_file in ${~source_pattern}(N)
  do
    # It's tempting to try to flatten the link a bit, but i've previously reused this logic for links
    # into homebrew things where you cannot fully flatten because this will freeze in installed versions
    target_file="${target_prefix}${source_file:t}"
    if [[ -h "${target_file}" ]]
    then
      current="$(zstat +link "${target_file}")"
      if [[ ! "${source_file}" == "${current}" ]]
      then
        printf "%s -> %s != %s\n" "${(q+)target_file}" "${(q+)current}" "${(q+)source_file}"
        # else it already points to the right place
      fi
    elif [[ -e "${target_file}" ]]
    then
      printf "%s is not a link\n" "${(q+)target_file}"
    else
      # it doesn't exist, set it up
      need_sudo "${target_dir}" && { SUDO=sudo ; }
      ${SUDO-} ln -s "${source_file}" "${target_file}"
      printf "%s -> %s\n" "${(q+)target_file}" "${(q+)source_file}"
    fi
  done

  for target_file in "${target_prefix}"*(N@)
  do
    current="$(zstat +link "${target_file}")"
    # Only remove links that match our source pattern, and test this first since it doesn't need to
    # check the filesystem
    if [[ ( "${current}" == ${~source_pattern} ) && ( ! -e ${current} ) ]]
    then
      need_sudo "${target_dir}" && { SUDO=sudo ; }
      printf "%s is dangling -> %s\n" "${(q+)target_file}" "${(q+)current}"
      printf ":; rm -- %s\n" "${(q+)target_file}"
      ${SUDO-} rm -i -- "${target_file}"
    fi
  done
fi
