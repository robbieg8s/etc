## Establish file system context

# These intentionally are not exported - they're just for this script to find things
# Prompt expand %x to get current file, absolutize
ZSHENV="${$(print -P '%x'):A}"
# We want the directory often enough also
ETC_ZSH_DIR="${ZSHENV:h}"

## General environment setup

export RIPGREP_CONFIG_PATH="${HOME}/.rgrc"
# When i use python virtual env, I don't it messing with my prompt
export VIRTUAL_ENV_DISABLE_PROMPT='yes'

## Shell history in a sqlite database
# This must be set up in zshenv - although most usage is interactive, backups need to know the database
# location, and the etc/libexec/setup script is run non-interactively when doing exploratory testing
# via etc/libexec/dockerized-etc
# Location of db
export HALFYAK_ETC_SQLITE_HISTORY_DB="${HOME}/.local/share/halfyak/etc/zsh/history.sqlite3"
# Main driver script
export HALFYAK_ETC_SQLITE_HISTORY="${ETC_ZSH_DIR}/libexec/sqlite-history"

## PATH
# Take complete control of PATH, i don't want any external injection here
path=(
  # My bin, common then platform specific
  # Note these are in this order to simplify the platform specific insertions, i don't expect
  # to use overrides / shadowing, it's just organisational
  "${HOME}"/bin{,/"$(uname -s)"}
  # Standard UNIX locations - this matches the alpine default
  {/usr{/local,},}/{sbin,bin}
)

## Environment/Command specific additional configuration
# File conventionally named after files near a given config file, and source additional configuration
# based on environment variable values or command output.
# This function is used by other configuration files, so make it global with appropriate prefix
halfyak_etc_after() {
  local file="${1:?}"
  shift
  local after_dir="${file:h}/after/${file:t}"

  # Files in the .../after/.../env directory are environment variables names, evaluate the
  # environment variable and source the appropriate value specific file if it exists
  local after_envs="${after_dir}/env"
  local after_env
  for after_env in "${after_envs}"/*(N)
  do
    local after_env_variable="${after_env:t}"
    [[ -v "${after_env_variable}" ]] && {
      # The variable name (taken from the directory name in the .../after/.../env) is set,
      # so use (P) to expand it to find the file with the value specific code ...
      local after_env_file="${after_env}/${(P)after_env_variable}"
      # ... and source it if present
      [[ -r "${after_env_file}" ]] && source "${after_env_file}"
    } # else ignore since the variable is not set
  done

  # Files in the .../after/.../cmd directory are encoded commands, run the command and source
  # the appropriate output specific file if it exists
  local after_cmds="${after_dir}/cmd"
  local after_cmd
  for after_cmd in "${after_cmds}"/*(N)
  do
    # Split on + as a simple way to encode command line options in the file name
    # In the event we need a sniffer which has a + in its actual name, we can add a wrapper
    local after_cmd_command=(${(s:+:)after_cmd:t})
    # Evaluate the command to find the value specific code ...
    local after_cmd_value
    after_cmd_value="$("${(@)after_cmd_command}")" && {
      # ... and source it if present
      local after_cmd_file="${after_cmd}/${after_cmd_value}"
      [[ -r "${after_cmd_file}" ]] && source "${after_cmd_file}"
    } # else ignore since the command failed
  done
}

halfyak_etc_after "${ZSHENV}"
