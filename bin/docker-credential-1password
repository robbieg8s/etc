#!/bin/zsh -ef

# Implement docker credential helper protocol by querying 1Password for a suitably
# tagged entry.
# The entry tag should be docker:${repository}:${email} where
# - repository is the string passed on stdin by the caller.
# - email is the git user.email for a git config launched in the cwd.
# See https://docs.docker.com/reference/cli/docker/login/#credential-helper-protocol

# Feature backlog:
# - It might be better if the tag is an encoded has of the context, since i ran into
#   trouble with 1Password not accepting '.' in field names.
# - It might be better to use a separate item (possibly named for a hash of the context)
#   so we can be less careful about field management below.
# - Coupling to the git user email is a little ugly, but it's a pragamtic way to keep
#   work and personal apart in this context.

# Only support get mode
[[ "$1" == get ]] || { printf "%s only supports get mode\n" "$0" 1>&2 ; exit 1 ; }

repository="$(cat)"
email="$(git config --get user.email)"
[[ -n "${email}" ]] || { printf "%s requires an email in git config\n" "$0" 1>&2 ; exit 1 ; }

tag="docker:${repository}:${email}"
prefix="docker-credential-"
op item list --tags "docker:${repository}:${email}" --format json \
| jq --raw-output --arg tag "${tag}" --from-file <(cat<<'END_JQ'
  . as [ { $id }, $extra ]
  | if ( null == $id ) then
      "Cannot find credentials tagged \($tag)\n" | halt_error(1)
    elif (null != $extra) then
      "Multiple (\(length)) credentials tagged \($tag)\n" | halt_error(1)
    else
      { $id }
    end
END_JQ
# It's a pity we can't pull a prefix match so we can transparently support more fields
# if needed (like the jq below does), but I don't want to pull all fields here because
# there's no reason to fetch the actual secret.
) | op item get --format json --fields "${prefix}Username,${prefix}Secret" - \
| jq --arg tag "${tag}" --arg prefix "${prefix}" --from-file <(cat<<'END_JQ'
  map(
    select(.label | startswith($prefix))
    | { key: .label[($prefix | length):], value }
  ) | from_entries
END_JQ
)
[[ 0 -eq "${#pipestatus:#0}" ]]
