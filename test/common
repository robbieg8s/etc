#!/bin/false
# This script is intended to be sourced

set -e

# Common test infrastructure

test_script="${1:?}"
test_base="${test_script%/test/*}"
test_offset="${test_script##*/test/}"
script_under_test="${test_base}/${test_offset:h}/${${test_offset:t}#test-}"

colored() {
  local color="${1:?}"
  shift
  print -P "%F{${color}}$@%f"
}

green() {
  colored green "$@"
}

red() {
  colored red "$@"
}

failed() {
  local test_name="${1:?}"
  local test_location="${2:?}"
  printf '%s: Test %s at %s\n' "$(red "TEST FAILED")" "$(green "${test_name}")" "${test_location}"
  shift 2
  printf '%s\n' "$@"
  printf 'Stdout:\n'
  cat "${output_dir}"/"${test_name}.out"
  printf 'Stderr:\n'
  cat "${output_dir}"/"${test_name}.err"
  exit 2
}


test_dir=$(mktemp -d)
output_dir="${test_dir}"/output
mkdir -p "${output_dir}"

cleanup() {
  case "$?" in
    0) green "PASSED" ;;
    *) red "FAILED" ;;
  esac
  rm -rf "${test_dir}"
}

trap 'cleanup ; trap - ERR EXIT' ERR EXIT
trap 'cleanup ; trap - INT ; kill -INT $$' INT

invoke_command_unchecked() {
  local test_name="${1:?}"
  shift
  # Clean up previous tests, so that accidental use of the wrong output is caught earlier
  rm -f "${output_dir}"/*.{out,err}(N)
  local stdout="${output_dir}/${test_name}.out"
  local stderr="${output_dir}/${test_name}.err"
  "$@" 1>"${stdout}" 2>"${stderr}"
  return "$?"
  # Caller checks exit code, if they forget, set -e above will keep them honest
}

invoke_command_checked() {
  local test_name="${1:?}"
  local test_location="${2:?}"
  shift 2
  invoke_command_unchecked "${test_name}" "$@" || {
    exit_code="$?"
    failed "${test_name}" "${test_location}" "Exit code ${exit_code} from ${script_under_test}"
  }
}

run_test_unchecked() {
  local test_name="${1:?}"
  shift
  invoke_command_unchecked "${test_name}" "${script_under_test}" "$@"
  return "$?"
  # Caller checks exit code, if they forget, set -e above will keep them honest
}

run_test() {
  local test_name="${1:?}"
  local test_location="${2:?}"
  shift 2
  invoke_command_checked "${test_name}" "${test_location}" "${script_under_test}" "$@"
}

run_test_wrapped() {
  local test_name="${1:?}"
  local test_location="${2:?}"
  local wrapper="${3:?}"
  shift 3
  invoke_command_checked "${test_name}" "${test_location}" "${wrapper}" "${script_under_test}" "$@"
}

verify_stdout() {
  local test_name="${1:?}"
  local test_location="${2:?}"
  local expected_stdout="${3:?}"
  local actual_stdout="${output_dir}/${test_name}.out"
  # Check stdout
  diff "${expected_stdout}" "${actual_stdout}" || \
    failed "${test_name}" "${test_location}" "Actual output (>) differs from expected (<), diff above"
  # Don't verify stderr, assume that it's informational if exit code and output are ok
}
